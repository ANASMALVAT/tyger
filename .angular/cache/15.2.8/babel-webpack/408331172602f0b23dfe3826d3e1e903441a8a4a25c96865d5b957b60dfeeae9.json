{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nconst _c0 = [\"mdbScrollspy\", \"\"];\nconst _c1 = [\"*\"];\nlet MdbScrollspyLinkDirective = /*#__PURE__*/(() => {\n  class MdbScrollspyLinkDirective {\n    constructor(cdRef, document) {\n      this.cdRef = cdRef;\n      this.document = document;\n      this._scrollIntoView = true;\n      this.scrollspyLink = true;\n      this.active = false;\n    }\n    get scrollIntoView() {\n      return this._scrollIntoView;\n    }\n    set scrollIntoView(value) {\n      this._scrollIntoView = value;\n    }\n    get section() {\n      return this._section;\n    }\n    set section(value) {\n      if (value) {\n        this._section = value;\n      }\n    }\n    get id() {\n      return this._id;\n    }\n    set id(newId) {\n      if (newId) {\n        this._id = newId;\n      }\n    }\n    onClick() {\n      if (this.section && this.scrollIntoView === true) {\n        this.section.scrollIntoView();\n      }\n    }\n    detectChanges() {\n      this.cdRef.detectChanges();\n    }\n    assignSectionToId() {\n      this.section = this.document.documentElement.querySelector(`#${this.id}`);\n    }\n    ngOnInit() {\n      this.assignSectionToId();\n    }\n  }\n  MdbScrollspyLinkDirective.ɵfac = function MdbScrollspyLinkDirective_Factory(t) {\n    return new (t || MdbScrollspyLinkDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n  MdbScrollspyLinkDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbScrollspyLinkDirective,\n    selectors: [[\"\", \"mdbScrollspyLink\", \"\"]],\n    hostVars: 4,\n    hostBindings: function MdbScrollspyLinkDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MdbScrollspyLinkDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"scrollspy-link\", ctx.scrollspyLink)(\"active\", ctx.active);\n      }\n    },\n    inputs: {\n      scrollIntoView: \"scrollIntoView\",\n      id: [\"mdbScrollspyLink\", \"id\"]\n    }\n  });\n  return MdbScrollspyLinkDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MdbScrollspyService = /*#__PURE__*/(() => {\n  class MdbScrollspyService {\n    constructor() {\n      this.scrollSpys = [];\n      this.activeSubject = new Subject();\n      this.active$ = this.activeSubject;\n    }\n    addScrollspy(scrollSpy) {\n      this.scrollSpys.push(scrollSpy);\n    }\n    removeScrollspy(scrollSpyId) {\n      const scrollSpyIndex = this.scrollSpys.findIndex(spy => {\n        return spy.id === scrollSpyId;\n      });\n      this.scrollSpys.splice(scrollSpyIndex, 1);\n    }\n    updateActiveState(scrollSpyId, activeLinkId) {\n      const scrollSpy = this.scrollSpys.find(spy => {\n        return spy.id === scrollSpyId;\n      });\n      if (!scrollSpy) {\n        return;\n      }\n      const activeLink = scrollSpy.links.find(link => {\n        return link.id === activeLinkId;\n      });\n      this.setActiveLink(activeLink);\n    }\n    removeActiveState(scrollSpyId, activeLinkId) {\n      const scrollSpy = this.scrollSpys.find(spy => {\n        return spy.id === scrollSpyId;\n      });\n      if (!scrollSpy) {\n        return;\n      }\n      const activeLink = scrollSpy.links.find(link => {\n        return link.id === activeLinkId;\n      });\n      if (!activeLink) {\n        return;\n      }\n      activeLink.active = false;\n      activeLink.detectChanges();\n    }\n    setActiveLink(activeLink) {\n      if (activeLink) {\n        activeLink.active = true;\n        activeLink.detectChanges();\n        this.activeSubject.next(activeLink);\n      }\n    }\n    removeActiveLinks(scrollSpyId) {\n      const scrollSpy = this.scrollSpys.find(spy => {\n        return spy.id === scrollSpyId;\n      });\n      if (!scrollSpy) {\n        return;\n      }\n      scrollSpy.links.forEach(link => {\n        link.active = false;\n        link.detectChanges();\n      });\n    }\n  }\n  MdbScrollspyService.ɵfac = function MdbScrollspyService_Factory(t) {\n    return new (t || MdbScrollspyService)();\n  };\n  MdbScrollspyService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MdbScrollspyService,\n    factory: MdbScrollspyService.ɵfac\n  });\n  return MdbScrollspyService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nlet MdbScrollspyDirective = /*#__PURE__*/(() => {\n  class MdbScrollspyDirective {\n    constructor(scrollSpyService, _elementRef, _renderer) {\n      this.scrollSpyService = scrollSpyService;\n      this._elementRef = _elementRef;\n      this._renderer = _renderer;\n      this._destroy$ = new Subject();\n      this._collapsible = false;\n      this.activeLinkChange = new EventEmitter();\n      this.collapsibleElementHeight = 0;\n    }\n    get id() {\n      return this._id;\n    }\n    set id(newId) {\n      if (newId) {\n        this._id = newId;\n      }\n    }\n    get collapsible() {\n      return this._collapsible;\n    }\n    set collapsible(value) {\n      this._collapsible = coerceBooleanProperty(value);\n    }\n    get host() {\n      return this._elementRef.nativeElement;\n    }\n    ngOnInit() {\n      this.collapsibleElementHeight = this.host.getBoundingClientRect().height;\n      this.activeSub = this.scrollSpyService.active$.pipe(takeUntil(this._destroy$), distinctUntilChanged()).subscribe(activeLink => {\n        this.activeLinkChange.emit(activeLink);\n        if (this.collapsible) {\n          this.styleCollapsibleElement();\n        }\n      });\n    }\n    ngAfterContentInit() {\n      this.scrollSpyService.addScrollspy({\n        id: this.id,\n        links: this.links\n      });\n    }\n    ngOnDestroy() {\n      this.scrollSpyService.removeScrollspy(this.id);\n      this._destroy$.next();\n      this._destroy$.complete();\n    }\n    styleCollapsibleElement() {\n      this._renderer.setStyle(this.host, 'overflow', 'hidden');\n      this._renderer.setStyle(this.host, 'transition', 'height 0.2s ease-in-out');\n      this._renderer.setStyle(this.host, 'flex-wrap', 'nowrap');\n      const hostSiblings = this.getAllSiblings(this.host);\n      const isAnySiblingActive = hostSiblings.some(element => {\n        return element.classList.contains('active');\n      });\n      if (this.collapsible && isAnySiblingActive) {\n        this._renderer.setStyle(this.host, 'height', `${this.collapsibleElementHeight}px`);\n      } else if (this.collapsible && !isAnySiblingActive) {\n        this._renderer.setStyle(this.host, 'height', '0px');\n      }\n    }\n    getAllSiblings(element) {\n      let siblings = [];\n      if (!element.parentNode) {\n        return siblings;\n      }\n      let sibling = element.parentNode.firstElementChild;\n      do {\n        if (sibling != element) {\n          siblings.push(sibling);\n        }\n      } while (sibling = sibling.nextElementSibling);\n      return siblings;\n    }\n  }\n  MdbScrollspyDirective.ɵfac = function MdbScrollspyDirective_Factory(t) {\n    return new (t || MdbScrollspyDirective)(i0.ɵɵdirectiveInject(MdbScrollspyService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  MdbScrollspyDirective.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MdbScrollspyDirective,\n    selectors: [[\"\", \"mdbScrollspy\", \"\"]],\n    contentQueries: function MdbScrollspyDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MdbScrollspyLinkDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n      }\n    },\n    inputs: {\n      id: [\"mdbScrollspy\", \"id\"],\n      collapsible: \"collapsible\"\n    },\n    outputs: {\n      activeLinkChange: \"activeLinkChange\"\n    },\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MdbScrollspyDirective_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return MdbScrollspyDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nlet MdbScrollspyElementDirective = /*#__PURE__*/(() => {\n  class MdbScrollspyElementDirective {\n    constructor(_elementRef, renderer, ngZone, scrollSpyService) {\n      this._elementRef = _elementRef;\n      this.renderer = renderer;\n      this.ngZone = ngZone;\n      this.scrollSpyService = scrollSpyService;\n      this.offset = 0;\n    }\n    get host() {\n      return this._elementRef.nativeElement;\n    }\n    get scrollSpyId() {\n      return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n      if (newId) {\n        this._scrollSpyId = newId;\n      }\n    }\n    isElementInViewport() {\n      const scrollTop = this.container.scrollTop;\n      const elTop = this.host.offsetTop - this.offset;\n      const elHeight = this.host.offsetHeight;\n      return scrollTop >= elTop && scrollTop < elTop + elHeight;\n    }\n    updateActiveState(scrollSpyId, id) {\n      if (this.isElementInViewport()) {\n        this.scrollSpyService.removeActiveLinks(scrollSpyId);\n        this.scrollSpyService.updateActiveState(scrollSpyId, id);\n      }\n    }\n    onScroll() {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n      this.renderer.listen(this.container, 'scroll', () => {\n        this.onScroll();\n      });\n    }\n    ngOnInit() {\n      this.id = this.host.id;\n      if (!this.container) {\n        this.container = this._getClosestEl(this.host, '.scrollspy-container');\n      }\n      this.renderer.setStyle(this.container, 'position', 'relative');\n      this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n      setTimeout(() => {\n        this.updateActiveState(this.scrollSpyId, this.id);\n      }, 0);\n    }\n    _getClosestEl(el, selector) {\n      for (; el && el !== document; el = el.parentNode) {\n        if (el.matches && el.matches(selector)) {\n          return el;\n        }\n      }\n      return null;\n    }\n  }\n  MdbScrollspyElementDirective.ɵfac = function MdbScrollspyElementDirective_Factory(t) {\n    return new (t || MdbScrollspyElementDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n  };\n  MdbScrollspyElementDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbScrollspyElementDirective,\n    selectors: [[\"\", \"mdbScrollspyElement\", \"\"]],\n    inputs: {\n      container: \"container\",\n      scrollSpyId: [\"mdbScrollspyElement\", \"scrollSpyId\"],\n      offset: \"offset\"\n    }\n  });\n  return MdbScrollspyElementDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MdbScrollspyWindowDirective = /*#__PURE__*/(() => {\n  class MdbScrollspyWindowDirective {\n    constructor(document, el, renderer, ngZone, scrollSpyService) {\n      this.document = document;\n      this.el = el;\n      this.renderer = renderer;\n      this.ngZone = ngZone;\n      this.scrollSpyService = scrollSpyService;\n      this.offset = 0;\n    }\n    get scrollSpyId() {\n      return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n      if (newId) {\n        this._scrollSpyId = newId;\n      }\n    }\n    isElementInViewport() {\n      const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n      const elHeight = this.el.nativeElement.offsetHeight;\n      const elTop = this.el.nativeElement.offsetTop - this.offset;\n      const elBottom = elTop + elHeight;\n      return scrollTop >= elTop && scrollTop <= elBottom;\n    }\n    updateActiveState(scrollSpyId, id) {\n      if (this.isElementInViewport()) {\n        this.scrollSpyService.updateActiveState(scrollSpyId, id);\n      } else {\n        this.scrollSpyService.removeActiveState(scrollSpyId, id);\n      }\n    }\n    onScroll() {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n      this.renderer.listen(window, 'scroll', () => {\n        this.onScroll();\n      });\n    }\n    ngOnInit() {\n      this.id = this.el.nativeElement.id;\n      this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n      setTimeout(() => {\n        this.updateActiveState(this.scrollSpyId, this.id);\n      }, 0);\n    }\n  }\n  MdbScrollspyWindowDirective.ɵfac = function MdbScrollspyWindowDirective_Factory(t) {\n    return new (t || MdbScrollspyWindowDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n  };\n  MdbScrollspyWindowDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbScrollspyWindowDirective,\n    selectors: [[\"\", \"mdbScrollspyWindow\", \"\"]],\n    inputs: {\n      scrollSpyId: [\"mdbScrollspyWindow\", \"scrollSpyId\"],\n      offset: \"offset\"\n    }\n  });\n  return MdbScrollspyWindowDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MdbScrollspyModule = /*#__PURE__*/(() => {\n  class MdbScrollspyModule {}\n  MdbScrollspyModule.ɵfac = function MdbScrollspyModule_Factory(t) {\n    return new (t || MdbScrollspyModule)();\n  };\n  MdbScrollspyModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MdbScrollspyModule\n  });\n  MdbScrollspyModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MdbScrollspyService]\n  });\n  return MdbScrollspyModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };\n//# sourceMappingURL=mdb-angular-ui-kit-scrollspy.mjs.map\n//# sourceMappingURL=mdb-angular-ui-kit-scrollspy.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}