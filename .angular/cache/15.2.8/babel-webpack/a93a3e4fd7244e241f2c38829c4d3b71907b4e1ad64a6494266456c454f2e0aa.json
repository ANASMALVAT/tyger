{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ThemeService {\n  constructor() {\n    this.currentThemeSubject = new BehaviorSubject('light');\n    this.currentTheme$ = this.currentThemeSubject.asObservable();\n  }\n  toggleTheme() {\n    console.log(\"Here\");\n    this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';\n  }\n  setTheme(theme) {\n    this.currentTheme = theme;\n  }\n  getTheme() {\n    return this.currentTheme;\n  }\n}\nThemeService.ɵfac = function ThemeService_Factory(t) {\n  return new (t || ThemeService)();\n};\nThemeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ThemeService,\n  factory: ThemeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,YAAY;EAGvBC;IAFQ,wBAAmB,GAA4B,IAAIF,eAAe,CAAS,OAAO,CAAC;IACpF,kBAAa,GAAuB,IAAI,CAACG,mBAAmB,CAACC,YAAY,EAAE;EAClE;EAEhBC,WAAW;IACTC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;EACtE;EAEAC,QAAQ,CAACC,KAAa;IACpB,IAAI,CAACF,YAAY,GAAGE,KAAK;EAC3B;EACAC,QAAQ;IACN,OAAO,IAAI,CAACH,YAAY;EAC1B;;AAfWP,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAW,SAAZX,YAAY;EAAAY,YAFX;AAAM","names":["BehaviorSubject","ThemeService","constructor","currentThemeSubject","asObservable","toggleTheme","console","log","currentTheme","setTheme","theme","getTheme","factory","providedIn"],"sourceRoot":"","sources":["D:\\MDB5-Angular-UI-KIT-Free-4.1.0\\mdb5-ng\\zips\\MDB5-ANGULAR-UI-KIT-Free\\src\\app\\theme.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  private currentThemeSubject: BehaviorSubject<string> = new BehaviorSubject<string>('light');\n  public currentTheme$: Observable<string> = this.currentThemeSubject.asObservable();\n  constructor() { }\n\n  toggleTheme(): void {\n    console.log(\"Here\")\n    this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';\n  }\n\n  setTheme(theme: string): void {\n    this.currentTheme = theme;\n  }\n  getTheme(): string {\n    return this.currentTheme;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}